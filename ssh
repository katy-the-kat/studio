#!/bin/bash
cd ~
clear
RED='\033[1;91m'
GREEN='\033[1;92m'
YELLOW='\033[1;93m'
BLUE='\033[1;94m'
MAGENTA='\033[1;95m'
CYAN='\033[1;96m'
WHITE='\033[1;97m'
RESET='\033[0m'
CPU_EMOJI="üíª"
RAM_EMOJI="üìà"
STORAGE_EMOJI="üìÅ"
CONNECT_EMOJI="üîó"
ERROR_EMOJI="‚ö†"
ERROR_EMOJI_V2="‚ùå"
SUCCESS_EMOJI="‚úÖ"
trap 'echo -e "\n\n${RED}${ERROR_EMOJI_V2} Exiting with status 1.${RESET}\n"; exit 1' SIGINT
text="E5-Compute"
fig=$(figlet "$text")
width=$(echo "$fig" | wc -L)
while IFS= read -r line; do
  for ((i=0; i<${#line}; i++)); do
    char="${line:i:1}"
    r=$((0 + (255 * i / (width - 1))))
    b=$((255 - (140 * i / (width - 1))))
    printf "\e[38;2;%d;255;%dm%s\e[0m" "$r" "$b" "$char"
  done
  printf "\n"
done <<< "$fig"
display_banner(){
  echo
  text="Node Usage"
  width=${#text}
  for ((i=0; i<width; i++)); do
    char="${text:i:1}"
    r=$((0 + (255 * i / (width - 1))))
    b=$((255 - (140 * i / (width - 1))))
    printf "\e[38;2;%d;255;%dm%s\e[0m" "$r" "$b" "$char"
  done
  echo
  echo -e " ${RAM_EMOJI}  RAM: ${WHITE}$ram_usage${RESET}"
  echo -e " ${STORAGE_EMOJI}  Storage: ${WHITE}$storage_usage${RESET}"
  echo -e " ${CPU_EMOJI}  CPU: ${WHITE}$cpu_usage${RESET}"
  echo
}
get_ram_usage(){
  total_ram=$(free -m | awk '/^Mem:/ {print $2}')
  used_ram=$(free -m | awk '/^Mem:/ {print $3}')
  if [ "$used_ram" -lt 1024 ]; then
    echo "${used_ram}MB"
  else
    used_ram_gb=$(echo "scale=2; $used_ram/1024" | bc)
    echo "${used_ram_gb}GB"
  fi
}
get_cpu_usage(){
  cpu_usage=$(top -b -n1 | grep "Cpu(s)" | awk '{print $2 + $4}')
  printf "%.2f%% / CPU\n" "$cpu_usage"
}
get_storage_usage(){
  usage_percentage=$(df -h --total | grep "total" | awk '{print $5}')
  echo "${usage_percentage}"
}
ram_usage=$(get_ram_usage)
cpu_usage=$(get_cpu_usage)
storage_usage=$(get_storage_usage)
display_banner
while true; do
  echo -e "\n\e[38;2;0;255;255m‚îå\e[38;2;51;255;245m‚îÄ\e[38;2;102;255;235m‚îÄ\e[38;2;153;255;225m(\e[38;2;204;255;215me\e[38;2;255;255;205mn\e[38;2;255;255;195mt\e[38;2;255;255;185me\e[38;2;255;255;175mr@\e[38;2;255;255;165mt\e[38;2;255;255;155mo\e[38;2;255;255;145mk\e[38;2;255;255;135me\e[38;2;255;255;125mn\e[38;2;255;255;115m)-[~] \e[0m"
  echo -ne "\e[38;2;0;255;255m‚îî\e[38;2;127;255;235m‚îÄ\e[38;2;255;255;245m> \e[0m"
  token=""
  while IFS= read -r -s -n 1 char; do
    if [[ $char == $'\0' ]]; then break; fi
    if [[ $char == $'\177' ]]; then
      if [[ -n "$token" ]]; then
        token=${token::-1}
        echo -ne "\b \b"
      fi
      continue
    fi
    token+="$char"
    echo -n "*"
  done
  echo
  token=$(echo "$token" | tr -cd 'A-Za-z0-9')
  if [[ -z "$token" || ${#token} -lt 5 ]]; then
    echo -e "\n${RED}${ERROR_EMOJI_V2}  You must enter a valid token (min 5 characters).${RESET}\n"
    continue
  fi
  if ! grep -Fq "$token" tokens.txt; then
    echo -e "\n${RED}${ERROR_EMOJI_V2}  Invalid token. Please try again.${RESET}\n"
    continue
  fi
  vps_id=$(grep "$token" tokens.txt | cut -d ',' -f 2 | tr -cd 'A-Za-z0-9')
  echo -e "\n${CYAN}${CONNECT_EMOJI}  Connecting to VPS...${RESET}"
  echo
  echo -e "${GREEN}${SUCCESS_EMOJI}  SSH session started successfully!${RESET}"
  echo
  if sudo pct enter "$vps_id"; then
    :
  else
    echo -e "${RED}${ERROR_EMOJI_V2} Failed to start SSH session. Check if VPS ID is valid.${RESET}"
    exit
  fi
  clear
  echo -e "${CYAN}${SUCCESS_EMOJI}  SSH session ended.${RESET}"
  break
done
exit 0
