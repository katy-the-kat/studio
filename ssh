#!/bin/bash
cd ~
clear
RED='\033[1;91m'
GREEN='\033[1;92m'
YELLOW='\033[1;93m'
BLUE='\033[1;94m'
MAGENTA='\033[1;95m'
CYAN='\033[1;96m'
WHITE='\033[1;97m'
RESET='\033[0m'
CPU_EMOJI="üíª"
RAM_EMOJI="üìà"
STORAGE_EMOJI="üìÅ"
CONNECT_EMOJI="üîó"
ERROR_EMOJI="‚ö†"
ERROR_EMOJI_V2="‚ùå"
SUCCESS_EMOJI="‚úÖ"
trap 'echo -e "\n\n${RED}${ERROR_EMOJI_V2} Exiting with status 1.${RESET}\n"; exit 1' SIGINT

  text="KVM-i7"
  fig=$(figlet "$text")
  width=$(echo "$fig" | wc -L)
  while IFS= read -r line; do
    for ((i=0; i<${#line}; i++)); do
      char="${line:i:1}"
      r=$((0 + (255 * i / (width - 1))))
      g=255
      b=$((255 - (140 * i / (width - 1))))
      printf "\e[38;2;%d;%d;%dm%s\e[0m" "$r" 255 "$b" "$char"
    done
    printf "\n"
  done <<< "$fig"

display_banner() {
  echo
  text="Node Usage"
  width=${#text}
  for ((i=0; i<width; i++)); do
    char="${text:i:1}"
    r=$((0 + (255 * i / (width - 1))))
    g=255
    b=$((255 - (140 * i / (width - 1))))
    printf "\e[38;2;%d;%d;%dm%s\e[0m" "$r" 255 "$b" "$char"
  done
  echo
  echo -e " ${RAM_EMOJI}  RAM: ${WHITE}$ram_usage${RESET}"
  echo -e " ${STORAGE_EMOJI}  Storage: ${WHITE}$storage_usage${RESET}"
  echo -e " ${CPU_EMOJI}  CPU: ${WHITE}$cpu_usage${RESET}"
  echo
}

get_ram_usage() {
  total_ram=$(free -m | awk '/^Mem:/ {print $2}')
  used_ram=$(free -m | awk '/^Mem:/ {print $3}')
  if [ "$used_ram" -lt 1024 ]; then
    echo "${used_ram}MB"
  else
    used_ram_gb=$(echo "scale=2; $used_ram/1024" | bc)
    total_ram_gb=$(echo "scale=2; $total_ram/1024" | bc)
    echo "${used_ram_gb}GB"
  fi
}

get_cpu_usage() {
  cpu_usage=$(top -b -n1 | grep "Cpu(s)" | awk '{print $2 + $4}')
  printf "%.2f%% / CPU\n" "$cpu_usage"
}

get_storage_usage() {
  total_storage=$(df -h --total | grep "total" | awk '{print $2}')
  used_storage=$(df -h --total | grep "total" | awk '{print $3}')
  usage_percentage=$(df -h --total | grep "total" | awk '{print $5}')
  echo "${usage_percentage}"
}

ram_usage=$(get_ram_usage)
cpu_usage=$(get_cpu_usage)
storage_usage=$(get_storage_usage)
display_banner

while true; do
  echo -e "\n\
\e[38;2;0;255;255m‚îå\e[38;2;51;255;245m‚îÄ\e[38;2;102;255;235m‚îÄ\e[38;2;153;255;225m(\e[38;2;204;255;215me\e[38;2;255;255;205mn\e[38;2;255;255;195mt\e[38;2;255;255;185me\e[38;2;255;255;175mr@\e[38;2;255;255;165mt\e[38;2;255;255;155mo\e[38;2;255;255;145mk\e[38;2;255;255;135me\e[38;2;255;255;125mn\e[38;2;255;255;115m)-[~] \e[0m"
  echo -ne "\e[38;2;0;255;255m‚îî\e[38;2;127;255;235m‚îÄ\e[38;2;255;255;245m> \e[0m"
  token=""
  while IFS= read -r -s -n 1 char; do
    if [[ $char == $'\0' ]]; then
      break
    fi
    if [[ $char == $'\177' ]]; then
      if [[ -n "$token" ]]; then
        token=${token::-1}
        echo -ne "\b \b"
      fi
      continue
    fi
    token+="$char"
    echo -n "*"
  done
  echo
  if [[ -z "$token" || ${#token} -lt 5 ]]; then
    echo -e "\n${RED}${ERROR_EMOJI_V2}  You must enter a valid token (min 5 characters).${RESET}\n"
    continue
  fi
  if ! grep -Fq "$token" tokens.txt; then
    echo -e "\n${RED}${ERROR_EMOJI_V2}  Invalid token. Please try again.${RESET}\n"
    continue
  fi
  vps_id=$(grep "$token" tokens.txt | cut -d ',' -f 2)
  echo -e "\n${CYAN}${CONNECT_EMOJI}  Connecting to VPS...${RESET}"
  echo
  echo -e "${GREEN}${SUCCESS_EMOJI}  SSH session started successfully!${RESET}"
  echo
  echo -e "\
\e[38;2;0;255;255mW\e[38;2;21;255;244me\e[38;2;42;255;233ml\e[38;2;63;255;222mc\e[38;2;84;255;211mo\e[38;2;105;255;200mm\e[38;2;126;255;189me\e[38;2;147;255;178m \e[38;2;168;255;167mt\e[38;2;189;255;156mo\e[38;2;210;255;145m \e[38;2;231;255;134mY\e[38;2;252;255;123mo\e[38;2;255;255;115mu\e[38;2;255;255;115mr \e[38;2;255;255;115mK\e[38;2;255;255;115mV\e[38;2;255;255;115mM\e[38;2;255;255;115m-\e[38;2;255;255;115mi\e[38;2;255;255;115m7 \e[38;2;255;255;115mV\e[38;2;255;255;115mP\e[38;2;255;255;115mS\e[38;2;255;255;115m!\e[0m\n\n\
\e[38;2;0;255;255mK\e[38;2;21;255;244me\e[38;2;42;255;233my \e[38;2;63;255;222mK\e[38;2;84;255;211me\e[38;2;105;255;200my \e[38;2;126;255;189mH\e[38;2;147;255;178mi\e[38;2;168;255;167mg\e[38;2;189;255;156mh\e[38;2;210;255;145mt\e[38;2;231;255;134m-\e[38;2;252;255;123mP\e[38;2;255;255;115mo\e[38;2;255;255;115mw\e[38;2;255;255;115me\e[38;2;255;255;115mr\e[38;2;255;255;115md \e[38;2;255;255;115mV\e[38;2;255;255;115mP\e[38;2;255;255;115mS\e[0m\n\
  \e[38;2;0;255;255m-\e[38;2;21;255;244m 1\e[38;2;42;255;233mTBp\e[38;2;63;255;222m DDOS Protection\e[0m \e[38;2;255;255;255m‚Äì No Chaos Allowed\e[0m\n\
  \e[38;2;84;255;211m-\e[38;2;105;255;200m Up to 500Mbps*\e[38;2;126;255;189m Internet\e[0m \e[38;2;255;255;255m‚Äì Speed to Outrun Your Existential Crisis\e[0m\n\
  \e[38;2;147;255;178m-\e[38;2;168;255;167m High-Performance\e[0m \e[38;2;255;255;255m‚Äì Smooth Like Your Best Decision\e[0m\n\n\
\e[38;2;189;255;156mEssential Resources for the Tech-Savvy Adventurer:\e[0m\n\
  \e[38;2;210;255;145m-\e[38;2;231;255;134m OS Documentation:\e[0m        \e[38;2;255;255;255mhttps://help.ubuntu.com\e[0m\n\
  \e[38;2;252;255;123m-\e[38;2;255;255;115m Server Management:\e[0m       \e[38;2;255;255;255mhttps://landscape.canonical.com\e[0m\n\
  \e[38;2;255;255;115m-\e[38;2;255;255;115m VPS Support/Management:\e[0m  \e[38;2;255;255;255mhttps://discord.gg/compute\e[0m\n\n\
\e[38;2;255;255;115mReminder:\e[0m \e[38;2;255;255;255mNo crypto mining on KVM-i7\e[0m\e[38;2;189;255;156m ‚Äì \e[38;2;255;255;255munless you want your VPS to vanish faster than your hopes and dreams.\e[0m\n"
  if sudo pct enter $vps_id; then
    {}
  else
    echo -e "${RED}${ERROR_EMOJI_V2} Failed to start SSH session. Check if VPS ID is valid.${RESET}"
    echo
    exit
  fi
  clear
  echo -e "${CYAN}${SUCCESS_EMOJI}  SSH session ended.${RESET}"
  echo
  break
done
exit 0
